sudo docker ps | grep --invert-match k8s
sudo ss --listening --numeric --processes --tcp | grep :8000
sudo docker stack ls
sudo docker service ls
sudo docker stack services WEBSERVER
sudo docker stack ps WEBSERVER

python3 -m http.server
sudo docker run python python3 -m http.server
sudo docker run --publish 8000:8000 python python3 -m http.server
sudo docker service create --name webserver --publish 8000:8000 python python3 -m http.server
sudo docker service scale webserver=10
sudo docker service scale webserver=1
sudo docker service scale webserver=10
sudo docker ps | grep webserver
sudo docker service rm webserver
sudo docker stack deploy --compose-file docker-compose.yaml WEBSERVER
sudo docker stack ls
sudo docker stack services WEBSERVER
sudo docker service logs WEBSERVER_webserver
sudo docker service logs WEBSERVER_webserver --follow

# RUN ON THE MASTER NODE
kubeadm token create --print-join-command
hostname --ip-address

# RUN ON THE WORKER NODE
echo 172.31.12.103 kube-apiserver | sudo tee --append /etc/hosts
sudo kubeadm join kube-apiserver:6443 --token vcfkyk.xxx --discovery-token-ca-cert-hash sha256:yyy

kubectl api-resources
kubectl explain svc
kubectl explain svc.apiVersion
kubectl explain svc.kind
kubectl explain svc.metadata
kubectl explain svc.spec
kubectl explain svc.spec.ports
kubectl explain svc.spec.ports.nodePort
kubectl explain svc.spec.ports.port
kubectl explain svc.spec.ports.protocol
kubectl explain svc.spec.ports.targetPort
kubectl explain svc.spec.selector
kubectl explain svc.spec.type

mkdir kubernetes
kubectl create ns python-app

tee kubernetes/svc.yaml 0<<EOF
apiVersion: v1
kind: Service
metadata:
  name: webserver
spec:
  ports:
  - nodePort: 30000
    port: 80
    protocol: TCP
    targetPort: 8000
  selector:
    myapp: python-webserver
  type: NodePort
EOF
kubectl apply --filename kubernetes/svc.yaml --namespace python-app
kubectl get svc --namespace python-app

kubectl explain po
kubectl explain po.spec
kubectl explain po.spec.containers
kubectl explain po.spec.containers.args
kubectl explain po.spec.containers.ports

tee kubernetes/po.yaml 0<<EOF
apiVersion: v1
kind: Pod
metadata:
  labels:
    myapp: python-webserver
  name: po
spec:
  containers:
  - args:
      - python3
      - -m
      - http.server
    image: python
    name: container
    ports:
    - containerPort: 8000
      protocol: TCP
EOF
kubectl apply --filename kubernetes/po.yaml --namespace python-app
kubectl get po --namespace python-app

kubectl get ns
kubectl get svc --namespace python-app
kubectl describe svc --namespace python-app
kubectl get po --namespace python-app
kubectl exec po --namespace python-app -- curl 192.168.180.129:8000
kubectl exec po --namespace python-app -- curl 10.96.250.138:80
kubectl get all --namespace python-app
kubectl delete pod/po --namespace python-app
kubectl delete service/webserver --namespace python-app

https://labs.play-with-k8s.com/
