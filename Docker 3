sudo docker ps
sudo docker diff 357568e56857

sudo docker run --detach --name test --network none nginx:alpine
sudo docker exec test ifconfig
sudo docker exec test ping localhost -c3
sudo docker exec test ping 8.8.8.8
sudo docker exec test ip route

sudo docker network ls
sudo docker inspect bridge | grep Containers -A8
sudo docker run --detach --name test2 nginx:alpine
sudo docker inspect bridge | grep Containers -A15
sudo docker exec test2 ping 172.17.0.2 -c3
sudo docker exec xenodochial_fermat ping 172.17.0.3 -c3

sudo docker network create test1
sudo docker network create test2 --driver bridge
sudo docker network create test3 --driver overlay
sudo docker network ls | grep test[123]
sudo docker network inspect test1
sudo docker network inspect test2
sudo docker network inspect test3
cat /etc/docker/daemon.json
sudo docker run --detach --name test-container --network test1 nginx:alpine
sudo docker network connect test2 test-container
sudo docker exec test-container ifconfig

sudo docker images
sudo docker inspect registry:2 | grep Layers -A6
sudo docker history registry:2 | grep -v 0B

sudo docker run --detach --name test-host --network host nginx:alpine
sudo docker ps --all | grep test-host
sudo docker logs test-host --tail 10
sudo docker rm test-host
sudo docker run --detach --name test-host --network host tomcat:alpine
sudo docker exec test-host ip link
ip link

sudo docker network create overlay-1 --driver overlay
sudo docker network create overlay-2 --driver overlay
sudo docker service create --mode global --name test-overlay --network overlay-1 --network overlay-2 nginx:alpine
sudo docker ps
sudo docker inspect test-overlay.zn2etxjzn5de4mxtvb96hikf8.u7cboa1d6ouk8qyowih2z7fzn
sudo docker exec test-overlay.zn2etxjzn5de4mxtvb96hikf8.u7cboa1d6ouk8qyowih2z7fzn ip route
sudo docker exec test-overlay.zn2etxjzn5de4mxtvb96hikf8.u7cboa1d6ouk8qyowih2z7fzn ifconfig
sudo docker exec test-overlay.zn2etxjzn5de4mxtvb96hikf8.u7cboa1d6ouk8qyowih2z7fzn ip link

sudo docker network create --driver bridge bridge-1
sudo docker network create --driver bridge bridge-2
sudo docker run --detach --name test-bridge --network bridge-1 --network bridge-2 nginx:alpine # THIS WILL FAIL
sudo docker run --detach --name test-bridge --network bridge-1 nginx:alpine
sudo docker network connect bridge-2 test-bridge
sudo docker inspect test-bridge

# sudo apt-get install -y kubelet kubeadm kubectl
ip_leader=$( hostname --ip-address )
kube=kube-apiserver
log=/tmp/install-leader.log
sleep=10
calico=https://docs.projectcalico.org/v3.21/manifests/calico.yaml
pod_network_cidr=192.168.0.0/16
kubeconfig=/etc/kubernetes/admin.conf
echo ${ip_leader} ${kube} | sudo tee --append /etc/hosts
sudo swapoff --all
sudo kubeadm init --upload-certs --control-plane-endpoint "${kube}" --pod-network-cidr ${pod_network_cidr} --ignore-preflight-errors all 2>&1 | tee --append ${log}
sudo kubectl apply --filename ${calico} --kubeconfig ${kubeconfig} 2>&1 | tee --append ${log}
mkdir -p ${HOME}/.kube
sudo cp /etc/kubernetes/admin.conf ${HOME}/.kube/config
sudo chown -R $( id -u ):$( id -g ) ${HOME}/.kube/
echo 'source <(kubectl completion bash)' | tee --append ${HOME}/.bashrc
source ${HOME}/.bashrc
while true ; do kubectl get no | grep Ready | grep --invert-match NotReady && break ; sleep ${sleep} ; done
sudo sed --in-place /${kube}/d /etc/hosts ; sudo sed --in-place /127.0.0.1.*localhost/s/$/' '${kube}/ /etc/hosts
grep ^kubeadm.join /tmp/install-leader.log -A1
master=$( kubectl get node | grep master | awk '{ print $1 }' )
kubectl taint node ${master} node-role.kubernetes.io/master:NoSchedule-

python3 -m http.server
curl localhost:8000

sudo docker run --publish 8000:8000 python python3 -m http.server
curl localhost:8000

sudo docker service create --name webserver --publish 8000:8000 python python3 -m http.server
curl $( hostname --ip-address ):8000
sudo docker service rm webserver

tee docker-compose.yaml 0<<EOF
services:
  webserver:
    ports:
      - 8000:8000
    image: python
    command:
      - python3
      - -m
      - http.server
version: '3.8'
EOF
sudo docker stack deploy --compose-file docker-compose.yaml WEBSERVER
sudo docker stack ls
sudo docker stack services WEBSERVER
sudo docker service logs WEBSERVER_webserver
